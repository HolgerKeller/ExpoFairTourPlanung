@model ExpofairTourPlanung.Models.Tour
@using System.Text.RegularExpressions

@{
    ViewData["Title"] = "Tourdaten";
}

<form asp-controller="Tour" Id="Tour" asp-action="SaveTour" enctype="multipart/form-data">

    <div class="card" style="margin-bottom: 15px;">

        <div class="card-header">
            <h5>Tourdaten:</h5>
        </div>

        <div class="card-body">

            @*@Html.ValidationSummary(false, "", new { @class = "text-danger" })*@


            @Html.Hidden("IdTour", (Model != null) ? Model.IdTour : 0)


            @*<input hidden asp-for="IdTour" />*@

            <input hidden asp-for="IsSbtour" value="false" />

            @if (Model == null)
            {
                <div class="row form-group">
                    <div class="col-6">
                        <label for="Tour">Tourdatum</label>

                        <input class="form-control" asp-for="TourDate" type="date" placeholder="Wann soll die Tour stattfinden" />

                    </div>
                </div>
            }
            else
            {
                <div class="row form-group">
                    <div class="col-6">
                        <label for="Tour">Datum:</label>
                        <input class="form-control" asp-for="TourDate" type="date" readonly />
                    </div>
                    <div class="col">
                        <label for="Tour">Tourname:</label>
                        <input class="form-control" asp-for="TourName" type="text" placeholder="Bitte legen Sie einen Tournamen fest" />

                    </div>
                </div>

                <div class="row form-group">
                    <div class="col-6">
                        <label for="Tour">Arbeitsbeginn:</label>
                        <input class="form-control" asp-for="StartWorkDay" type="text" value="8:00 Uhr"/>
                    </div>
                 
                </div>
                <div class="row form-group">
                    <div class="col-6">
                        <label for="Tour">Fahrzeug</label>
                        @Html.DropDownListFor(model => Model.VehicleNr, (SelectList)ViewBag.Vehicles, "Welche Fahrzeuge?", new { @class = "form-control", @multiple = "multible", @placeholder = "Fahrzeug auswählen" })
                    </div>
                    <div class="col">
                        <label for="Tour">Fahrer</label>
                        @Html.DropDownListFor(model => Model.Driver, (SelectList)ViewBag.Employees, "Wer sind die Fahrer?", new { @class = "form-control", @multiple = "multible", @placeholder = "Wer ist der Fahrer?" })

                    </div>
                </div>
                <div class="row form-group">
                    <div class="col ">
                        <label for="Tour">Verantwortlicher</label>
                        @Html.DropDownListFor(model => Model.Master, (SelectList)ViewBag.Employees, "Wer ist Verantwortlich?", new { @class = "form-control", @placeholder = "Wer ist verantworlich?" })

                    </div>
                    <div class="col">
                        <label for="Tour">Team</label>
                        @Html.DropDownListFor(model => Model.Team, (SelectList)ViewBag.Employees, new { @class = "form-control", @multiple = "multible", @placeholder = "Wer ist weiterhin im Team?" })

                    </div>
                </div>

                <div class="row form-group">
                    <div class="col">
                        <label for="Tour">Kommentar</label>
                        <textarea rows="6" class="form-control" asp-for="Comment" placeholder="Hier können Sie einen Kommentar eintragen. Der Text wird vor den Jobs dargestellt."></textarea>
                    </div>
                </div>

                <div class="row form-group">
                    <div class="col">
                        <label for="Tour">Abschlusstext</label>
                        <textarea rows="6" class="form-control" asp-for="Footer" placeholder="Hier können Sie einen Text hinterlegen, der nach den Jobs angezeigt wird."></textarea>
                    </div>
                </div>
            }
        </div>

        <div class="card-footer">
            <button class="btn btn-primary" type="submit">Speichern</button>
        </div>
    </div>
</form>


@if (Model != null)
{
    <div class="card" style="margin-bottom: 15px;">

        <div class="card-header">

            <div class="container">
                <div class="row">
                    <div class="col-8">
                        <h5>folgende Jobs sind der Tour zugeordnet:</h5>
                    </div>
                    <div class="col-4">
                        <h5>Gesamtmasse:  @Model.Weight Kg</h5>
                        </div>
                </div>
            </div>



            
        </div>

        <div class="card-body">
            @{
                List<Job2Tour> tourJobs = ViewBag.tourJobs;
            }
            <table class="table table-sm table-hover">
                <tr>
                    <th class="col-1">Zeit</th>
                    <th class="col-1">An/Ab</th>
                    <th class="col-2">JobNr<br />fertig bis</th>
                    <th class="col-4">Bezeichnung</th>
                    <th class="col-3">Adresse</th>

                    <th class="col-1">&nbsp;</th>
                </tr>

                @foreach (Job2Tour job in tourJobs)
                {

                    <tr onclick="showModal(@job.IdTourJob)">

                        @{
                            string jobDT = @job.JobDate.ToString("dd.MM.yyyy");


                            if (job.DeliveryType == "Lieferung" || job.DeliveryType == "Ausgabe")
                            {
                                string returnDT = @job.JobDateReturn.ToString();
                                returnDT = Regex.Replace(returnDT, "00:00:00$", "");


                                if (!String.IsNullOrEmpty(job.Time))
                                {
                                    <td nowrap>@jobDT<br />@job.Time<br />(@returnDT)</td>
                                }
                                else
                                {
                                    <td nowrap>@jobDT<br />(@returnDT)</td>
                                }
                            }
                            else
                            {
                                <td nowrap>@jobDT<br />@job.Time</td>
                            }
                        }

                        @{
                            if (job.IdJobState == 5)
                            {
                                <td>@job.DeliveryType<br />Zumietung</td>
                            }
                            else
                            {
                                <td>@job.DeliveryType</td>
                            }
                        }

                        <td>@job.Number<br />@job.ReadyTime</td>

                        <td>@job.Caption<br />Masse: @job.Weight Kg </td>

                        @{

                            if (job.AddressTXT != null)
                            {
                                //string[] words = @job.Address.Split(';');

                                //string Addr = Regex.Replace(@job.AddressTXT, "(\r\n|\r|\n)+", "\r");
                                string Addr = Regex.Replace(Regex.Replace(@job.AddressTXT, "(\r \r|\r+)", "\r"), "(\r\n|\r|\n)", "<br />");

                                                <td>



                                                    @{ WriteLiteral(Addr); }
                                                    


                                                </td>


        @*@words[0] <br />
        @{
            if (@words[1] != "")
            {
                @words[1] <br />
            }
            if (@words[4] != "")
            {
                @words[4] <br />
            }
            if (@words[2] != "")
            {
                <text>@words[2]  @words[3]</text>
            }
        }*@

                                                }
                                                else
                                                {
<td>&nbsp;</td>
                            }

                        }

                        <td class="text-right">
                            <button onclick="onClickedDecreaseJobRankingButton(event, @Model.IdTour, @job.IdTourJob)" class="btn btn-sm" aria-label="Nach Vorn">
                                <span class="fa fa-arrow-up fa-lg" aria-hidden="true"></span>
                            </button>
                            <button onclick="onClickedIncreaseJobRankingButton(event, @Model.IdTour, @job.IdTourJob)" class="btn btn-sm" aria-label="Nach Hinten">
                                <span class="fa fa-arrow-down fa-lg" aria-hidden="true"></span>
                            </button>

                            <button onclick="onClickedDelJobButton(event, @Model.IdTour, @job.IdTourJob)" class="btn btn-default btn-sm" aria-label="Entfernen">
                                <span class="fa fa-minus fa-lg" aria-hidden="true"></span>
                            </button>
                            <a asp-route-id="@job.IdTourJob" asp-controller="Job" asp-action="EditJob" class="btn btn-sm" aria-label="Bearbeiten">
                                <span class="fa fa-edit fa-lg" aria-hidden="true"></span>
                            </a>
                        </td>
                    </tr>
                }

            </table>
        </div>
    </div>

    <div class="card" style="margin-bottom: 15px;">

        <div class="card-header">
            <div class="col-8">
                <h5>folgende Jobs sind bisher keiner Tour zugeordnet:</h5>
            </div>
            <div class="col-4">
                <h5>Gesamtmasse:</h5>
            </div>
        </div>

        <div class="card-body">
            @{
                List<Job2Tour> jobs = ViewBag.freeJobs;
            }
            <table class="table table-sm table-hover">
                <tr>
                    <th class="col-1">&nbsp;</th>
                    <th class="col-1">Zeit</th>
                    <th class="col-2">JobNr<br />fertig bis</th>
                    <th class="col-4">Bezeichnung</th>
                    <th class="col-3">Adresse</th>

                    <th class="col-1">&nbsp;</th>
                </tr>

                @foreach (Job2Tour job in jobs)
                {
                    <tr onclick="showModal(@job.IdTourJob)">
                        <td>@job.DeliveryType</td>


                        <td>@job.Time</td>


                        <td>@job.Number<br />@job.ReadyTime</td>

                        <td>@job.Caption</td>

                        @{
                            if (job.Address != null)
                            {
                                string[] words = @job.Address.Split(';');
                                                <td>
                                                    @words[0] <br />
                                                    @{ 
                                                        if (@words[1] != "")
                                                        {
                                                    @words[1] <br />
                                                        }
                                                        if (@words[4] != "")
                                                        {
                                                    @words[4] <br />
                                                        }
                                                        if (@words[2] != "")
                                                        {
                                                   <text>@words[2]  @words[3]</text>
                                                            }
                                                    }
                                                </td>
                            }
                            else
                            {
                                <td>&nbsp;</td>
                            }
                        }

                    <td class="text-right">
                        <button onclick="onClickedAddJobButton(event, @Model.IdTour, @job.IdTourJob)" class="btn btn-sm" aria-label="Zufügen">
                            <span class="fa fa-plus fa-lg" aria-hidden="true"></span>
                        </button>
                        <button onclick="onClickedCloneJobButton( event, @job.IdTourJob )" class="btn btn-sm" aria-label="Duplizieren">
                            <span class="fa fa-clone fa-lg" aria-hidden="true"></span>
                        </button>


                        @*<button onclick="showModal(@job.IdTourJob)" class="btn btn-sm" aria-label="Detail">
            <span class="fa fa-info fa-lg" aria-hidden="true"></span>
        </button>*@
</tr>
                }
            </table>
        </div>
    </div>
}
<div class="modal fade" id="modalJobDetail" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <h6>Adresse:</h6>
                <div id="modalAddress">
                </div>

                <hr class="col-xs-12">
                <h6>Ansprechpartner:</h6>
                <div id="modalContact">
                </div>

                <hr class="col-xs-12">
                <h6>KontaktInfo:</h6>
                <div id="modalContactPhone">
                </div>

                <hr class="col-xs-12">
                <h6>Zeiten:</h6>
                <div id="modalDateTime">
                </div>

                <hr class="col-xs-12">
                <h6>Kommentar:</h6>
                <div id="modalComment">
                </div>

                <hr class="col-xs-12">
                <h6>Gewicht in kg:</h6>
                <div id="modalWeight">
                </div>

                <hr class="col-xs-12">
                <h6>Inhalt:</h6>
                <div class="table-responsive" id="modalStock">
                </div>


            </div>
    </div>
</div>




@section scripts {

    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation/dist/additional-methods.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>


    @if (Model != null)
    {
        <script>

        $(document).ready(function() {
            $('#Team').SumoSelect({
                    outputAsCSV: true,
                csvSepChar: ','
            });
            $('#VehicleNr').SumoSelect({
                    outputAsCSV: true,
                csvSepChar: ','
            });
            $('#Driver').SumoSelect({
                    outputAsCSV: true,
                csvSepChar: ','
            });
            $('#Master').SumoSelect();
            $('#TourName').SumoSelect();


                    selectDriver(@Html.Raw(Json.Serialize(Model.Driver)));
                    selectVehicle(@Html.Raw(Json.Serialize(Model.VehicleNr)));
                    selectTeam(@Html.Raw(Json.Serialize(Model.Team)));

                });

            function selectTeam(team) {
                if (team) {
                var members = team.split(",");
                var arrayLength = members.length;
                    for (var i = 0; i < arrayLength; i++) {
                        $('#Team')[0].sumo.selectItem(members[i]);
                    }
                }
            }
            function selectDriver(driver) {
                if (driver) {
                var members = driver.split(",");
                var arrayLength = members.length;
                    for (var i = 0; i < arrayLength; i++) {
                        $('#Driver')[0].sumo.selectItem(members[i]);
                    }
                }
            }
            function selectVehicle(vehicle) {
                if (vehicle) {
                var members = vehicle.split(",");
                var arrayLength = members.length;
                    for (var i = 0; i < arrayLength; i++) {
                        $('#VehicleNr')[0].sumo.selectItem(members[i]);
                    }
                }
            }
        </script>
    }
    else
    {
        <script>

        $(document).ready(function() {
            $('#Team').SumoSelect({
                    outputAsCSV: true,
                csvSepChar: ','
            });
            $('#VehicleNr').SumoSelect({
                    outputAsCSV: true,
                csvSepChar: ','
            });
            $('#Driver').SumoSelect({
                    outputAsCSV: true,
                csvSepChar: ','
            });
            $('#Master').SumoSelect();
            $('#TourName').SumoSelect();
        });

        </script>
    }

<script>

        function showModal(id) {

            $.ajax({
                type: "GET",
                url: "@Url.Action("GetJobDetail")",
                data: { id: id },
                success: function (daten) {

                    var comment = daten.comment.replace(/Storno[\s\S]+$/g, "");
                    comment = comment.replace(/_*/g, "");

                    address = daten.addressTXT.replace(/(?:\r\n|\r|\n)/g, "<br>");


                    var jobDate = new Date(daten.jobDate).toLocaleDateString('de-DE');
                    var time = daten.time;
                    var readyTime = daten.readyTime;

                    var dateTime = "Jobdatum: " + jobDate;

                    if (daten.jobDateReturn ) {
                        var jobDateReturn = new Date(daten.jobDateReturn).toLocaleDateString('de-DE');
                        dateTime = dateTime + "<br />" + "Rückgabe: " + jobDateReturn;
                    }
                    if (daten.time && time != "") {
                        dateTime = dateTime + "<br />" + "Zeit: " + time + " Uhr";
                    }
                    if (daten.readyTime && readyTime != "") {
                        dateTime = dateTime + "<br />" + "Fertig bis: " + readyTime + " Uhr";
                    }

                    $('#modalTitle').text(daten.number + " " + daten.caption + " (" + daten.deliveryType + ")");
                    $('#modalAddress').html(address);
                    $('#modalComment').text(comment);
                    $('#modalWeight').html(daten.weight);
                    $('#modalDateTime').html(dateTime);

                    var str = daten.stock;

                    var table = document.createElement('TABLE');
                    table.setAttribute('class', 'table table-bordered col-xs-12')//this is bootstraps classes
                    var tbdy = document.createElement('TBODY');
                    table.appendChild(tbdy);


                    // Tab-Taste alt+09

                    var output = document.getElementById("modalStock");

                    var temp = new Array();
                    temp = str.split("\r");
                    for (var zxc2 = 0; zxc2 < temp.length; zxc2++) {

                        var temp1 = new Array();
                        temp1 = temp[zxc2].split("\t");

                        if (temp1[1] != undefined) {

                            if (temp1[0] != "") {
                                var tr = document.createElement('TR');
                                tbdy.appendChild(tr);

                                var td = document.createElement('TD');
                                td.appendChild(document.createTextNode(temp1[0]));
                                tr.appendChild(td);

                                var td1 = document.createElement('TD');
                                td1.appendChild(document.createTextNode(temp1[1]));
                                tr.appendChild(td1);
                            } else {
                                var value = td1.innerText + "\n" + temp1[1];
                                td1.innerText = value;
                            }
                        }
                    }

                    if (output.hasChildNodes) {
                        output.removeChild(output.lastChild);
                    }
                    output.appendChild(table);

                    $('#modalJobDetail').modal('show')
                }
             });
        }


    function onClickedAddJobButton(e, id, idTourJob) {

        $('form#Tour').submit();

                    // Backend call to Add Job to the tour
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("AddJob2Tour")",
                        data: { id: id, idTourJob: idTourJob },
                        success: function (msg) {
                        location.reload();
                        },
                        error: function (msg) {
                            Swal.fire('Ups, etwas ist schief gelaufen!', '', 'error')
                        }
                    });
                    myEventHandler(e);
//                    e.stopPropagation();
        }
        function onClickedDelJobButton(e, id, idTourJob) {

                    // Backend call to Add Job to the tour
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("DelJobFromTour")",
                        data: { id: id, idTourJob: idTourJob  },
                        success: function (msg) {
                        location.reload();
                        },
                        error: function (msg) {
                            Swal.fire('Ups, etwas ist schief gelaufen!', '', 'error')
                        }
                    });

                    myEventHandler(e);
                    //e.stopPropagation();
                }
                function onClickedIncreaseJobRankingButton(e, id, idTourJob) {

                    // Backend call to Add Job to the tour
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("IncreaseJobRanking")",
                        data: { id: id, idTourJob: idTourJob  },
                        success: function (msg) {
                         location.reload();
                        },
                        error: function (msg) {
                            Swal.fire('Ups, etwas ist schief gelaufen!', '', 'error')
                        }
                    });

                    myEventHandler(e);
                   // e.stopPropagation();
                }
        function onClickedDecreaseJobRankingButton(e, id, idTourJob) {

                    // Backend call to Add Job to the tour
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("DecreaseJobRanking")",
                        data: { id: id, idTourJob: idTourJob  },
                        success: function (msg) {
                        location.reload();
                        },
                        error: function (msg) {
                            Swal.fire('Ups, etwas ist schief gelaufen!', '', 'error')
                        }
                    });

            myEventHandler(e);
            //e.stopPropagation();
        }

    function onClickedCloneJobButton( e, id ) {

            Swal.fire({
                title: 'Möchtest du den Job wirklich duplizieren?',
                icon: 'error',
                showCloseButton: true,
                focusConfirm: false,
                confirmButtonText:
                    'Ja, Clonen!',
            }).then((result) => {
                if (result.isConfirmed) {

                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("CloneJobById")",
                        data: { id: id },
                        success: function (msg) {
                            Swal.fire('Der Job wurde Dubliziert !', '', 'success').then((result) => {
                                location.reload();
                            });
                        },
                        error: function (msg) {
                            Swal.fire('Ups, etwas ist schief gelaufen!', '', 'error')
                        }
                    });
                }
            })
        myEventHandler(e);
        //e.stopPropagation();
    }

    function myEventHandler(e) {

        if (!e)
            e = window.event;

        //IE9 & Other Browsers
        if (e.stopPropagation) {
            e.stopPropagation();
        }
        //IE8 and Lower
        else {
            e.cancelBubble = true;
        }
    }


</script>

    }
